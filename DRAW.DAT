;------------------------------------------
; PURPOSE : read and draw a pcx file
; SYSTEM  : Turbo Assembler Ideal Mode
; AUTHOR  : Itay benvenisti (assisted by almog hamdani)
;------------------------------------------


SEGMENT FILEBUF para public
        DB 65200 dup (?)
;-----  This segment will hold the pcx file so it will be easier to read from
ENDS

;------------------------
;ReadPCX - Reads a PCX file
;------------------------
;Input:
;       FileName <- The PCX file name
;Output:
;       FILEBUF <- The contents of the file, FileSize <- The size of the file
;Registers:
;       AX, BX, CX, DX
;------------------------

PROC ReadPCX


;-----  Try open file using interrupt
        mov ah, 3Dh ; Interrupt entry
        mov al, 0h ; Open for read only
        lea dx, [FileName]
        int 21h

;-----  Error occurred
        jc @@Error

        mov [FileHandle], ax

;-----  Set file pointer to it's end
        mov ah, 42h  ; Interrupt Entry
        mov al, 2h ; Setting offset from end of file
        mov bx, [FileHandle]

        ; Set offset to 0:0
        xor dx, dx
        xor cx, cx

        int 21h

;-----  Error occurred
        jc @@Error

;-----  Check if file is too big
        cmp dx, 0
        jne @@Error

;-----  Set file size
        mov [FileSize], ax

;-----  Return file pointer to start
        mov ah, 42h  ; Interrupt Entry
        mov al, 0h ; Setting offset from start of file
        mov bx, [FileHandle]

        ; Set offset to 0:0
        xor dx, dx
        xor cx, cx

        int 21h

;-----  Error occurred
        jc @@Error

;-----  Read all file into FILEBUF segment
        push ds ; Save original data segment

        mov cx, [FileSize] ; Tell interrupt to read all the file
        mov bx, [FileHandle]

        ; Set data segment as FILEBUF segment
        mov ax, FILEBUF
        mov ds, ax
        xor dx, dx ; Set offset 0

        mov ah, 3Fh ; Interrupt entry

        int 21h

;-----  Error occurred
        jc @@Error

        pop ds ; Return data segment

;-----  Close file
        mov ah, 3Eh ; Interrupt entry
        mov bx, [FileHandle]

        int 21h

;-----  Error occurred
        jc @@Error
        ret

@@Error:
;-----  Set text mode
        mov ax, 3h
        int 10h

;-----  Print error
        mov ah, 9h
        lea dx, [PCXErrorMSG]
        int 21h

;Clear keyboard buffer
        mov ah,0ch
      	mov al,0h
        int 21h


        ;Read char from keyboard buffer (int 16h)
      	mov ah, 0h  ;Int requirement
        int 16h     ;Execute

        jmp Exit

ENDP

;------------------------
;DrawPCX - Draws a pcx to a specific location on the screen (Currently only supports default pallete)
;------------------------
;Input:
;       StartX <- The X to start draw in, StartY <- The Y to start draw in, FileName <- The PCX file name
;Output:
;       The PCX on the screen
;Registers:
;       AX, BX, CX, DX, SI, DI, ES
;------------------------

PROC DrawPCX

        call ReadPCX

;-----  Set extra segment as file buffer
        mov ax, FILEBUF
        mov es, ax
        mov si, 128 ; Set si to point at the start of the image data

;-----  Get image' width
        mov ax, [es:8h] ; Width is in the 8h pos
        inc ax ; Plus 1
        mov [ImageWidth], ax

;-----  Get image' height
        mov ax, [es:0Ah] ; Height is in the 6h pos
        inc ax ; Plus 1
        mov [ImageHeight], ax

;-----  Set starting position
        mov ax, [StartX]
        mov [X], ax
        mov ax, [StartY]
        mov [Y], ax

@@GetByte:
        mov al, [es:si]
        mov [Color], al
        inc si ; Point to next byte
        cmp [Color], 192 ; Check if there is a seq
        jb @@DrawNormal

        sub [Color], 192 ; In cx there is the amount of pixels to write
        mov ch, 0h ; Reset cx
        mov cl, [Color]
        mov al, [es:si]
        mov [Color], al
        inc si ; Point to next byte

@@DrawSeq:
;-----  Set extra segment as video memory
        mov ax, 0A000h
        mov es, ax

        call PutPixel

;-----  Set extra segment as file buffer
        mov ax, FILEBUF
        mov es, ax

        inc [X] ; Set next x

;-----  Check if we got to the end of the line
        mov bx, [StartX]
        add bx, [ImageWidth]
        cmp bx, [X]
        je @@NewLine

        loop @@DrawSeq

        jmp @@GetByte

@@DrawNormal:
;-----  Set extra segment as video memory
        mov ax, 0A000h
        mov es, ax

        call PutPixel

;-----  Set extra segment as file buffer
        mov ax, FILEBUF
        mov es, ax

        inc [X] ; Set next x

;-----  Check if we got to the end of the line
        mov bx, [StartX]
        add bx, [ImageWidth]
        cmp bx, [X]
        je @@NewLine

        jmp @@GetByte

@@NewLine:
        mov ax, [StartX]
        mov [X], ax ; Set x to start

        inc [Y] ; Set next line

;-----  Check if the line was the last line
        mov bx, [StartY]
        add bx, [ImageHeight]
        cmp bx, [Y]

        je @@End

        jmp @@GetByte

@@Error:
;-----  Set text mode
        mov ax, 3h
        int 10h

;-----  Print error
        mov ah, 9h
        lea dx, [PCXErrorMSG]
        int 21h
        jmp Exit

@@End:


;-----  Return video memory
        mov ax, 0A000h
        mov es, ax


        ret
ENDP DrawPCX


;------------------------
;PutPixel - Write dot
;------------------------
;Input:
;       X, Y, Color (All vars)
;Output:
;       None
;Registers:
;       AX(restored), DI, ES
;------------------------
PROC PutPixel
        push ax
        mov di, [Y]
        mov ax, [Y]
        shl di, 8
        shl ax, 6
        add di, ax
        add di, [X]
        mov al, [Color]
        mov bx, graphic_mode_offset
        mov es, bx
        mov [es:di], al
        pop ax
        ret
ENDP PutPixel
